{"version":3,"sources":["webpack://hyperbox-js/webpack/universalModuleDefinition","webpack://hyperbox-js/webpack/bootstrap","webpack://hyperbox-js/webpack/runtime/define property getters","webpack://hyperbox-js/webpack/runtime/hasOwnProperty shorthand","webpack://hyperbox-js/webpack/runtime/make namespace object","webpack://hyperbox-js/./src/box-utils.js","webpack://hyperbox-js/./src/box-inner-core.js","webpack://hyperbox-js/./src/box.js","webpack://hyperbox-js/./src/box-core.js","webpack://hyperbox-js/./src/start-box-server.js","webpack://hyperbox-js/./src/index.js"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","BoxUtils","prefix","variableName","returnName","CapitalizeFirstLetter","BuildPrefixedFunctionName","length","firstChar","toUpperCase","substr","path","Promise","resolve","request","XMLHttpRequest","overrideMimeType","open","onreadystatechange","console","log","readyState","status","JSON","parse","response","send","box","display","_parentBox","detectBoxChanges","LoadDOMAttributes","newMarkup","innerHTML","_init","boxOnRedisplayed","boxInterface","constructor","_BoxInterface","BuildBoxInputs","Inputs","Outputs","BuildBoxOutputs","inputsObject","inputsWithStockProperties","_parentBoxId","keys","forEach","interfaceProp","setterName","BuildSetterName","getterName","BuildGetterName","outputsObject","newBoxOutputEvent","CustomEvent","detail","eventBoxName","dispatchEvent","callback","addEventListener","removeEventListener","contextPath","_name","_boxId","_context","attributes","i","boxAttribute","item","attributeName","name","attributeValue","trimmedName","TrimFirstAndLastChar","IsVariableInputProperty","IsOutputProperty","functionName","GetFunctionNameFromFunctionCallString","parentBox","getParentBox","ev","propertyName","functionCallString","returnString","slice","boxConfig","_BoxConfig","SharedBoxCore","loadedBoxes","set","Map","BoxInnerCore","window","document","Window","Document","Box","getNewBoxId","id","styleSheetPath","BoxLoader","LoadStylesheet","boxOnDisplayed","getElementById","_container","remove","boxOnDestroyed","HTMLElement","BoxCore","boxClassName","boxCapitalisedName","BoxRegistry","boxContainer","createElement","setAttribute","registry","Error","boxClass","boxCount","size","BuildBoxesCustomElementRegistry","parentBoxId","boxParent","newBoxId","GetNewBoxId","AddBoxToLoadedBoxes","BuildBoxInterfaces","BuildBoxStandardVariables","CreateBoxContainer","DisplayBox","appendChild","className","BoxInstanceFactory","_className","AddBoxToDOM","express","require","favicon","port","process","env","PORT","startBoxServer","dir","app","pubDir","distDir","use","req","res","sendFile","listen"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hyperbox-js\"] = factory();\n\telse\n\t\troot[\"hyperbox-js\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/**\n * @author Alessandro Alberga\n * @description Box utils.\n */\nexport class BoxUtils {\n\n  /**\n   * Check if a value value is null or empty.\n   *\n   * @param { String } str the string to preform null or empty check on. \n   */\n  static IsNullOrEmpty = (value) => {\n    if (typeof value === 'string') {\n      return !value.length\n    }\n    if (typeof value === 'object') {\n      return !Object.keys(value || {}).length\n    }\n    return true;\n  }\n\n  /**\n   * Build a function name that uses a certain prefix.\n   *\n   * @param { String } prefix prefix string e.g. 'get'\n   * @param { String } variableName variable name e.g. 'name'\n   */\n  static BuildPrefixedFunctionName(prefix, variableName) {\n    let returnName = BoxUtils.CapitalizeFirstLetter(variableName);\n    returnName = `${prefix}${returnName}`;\n    return returnName;\n  }\n\n  /**\n   * Build the setter name for a variable name.\n   *\n   * @param { String } variableName variable name.\n   */\n  static BuildSetterName(variableName) {\n    return BoxUtils.BuildPrefixedFunctionName('set', variableName)\n  }\n\n  /**\n   * Build the geter name for a variable name.\n   *\n   * @param { String } variableName variable name.\n   */\n  static BuildGetterName(variableName) {\n    return BoxUtils.BuildPrefixedFunctionName('get', variableName)\n  }\n\n  /**\n   * Capitalise the first letter in a string.\n   *\n   * @param { String } value string value.\n   * @returns { String } Capitalised string.\n   */\n  static CapitalizeFirstLetter(value) {\n    if (value && value.length) {\n      const firstChar = value[0].toUpperCase();\n      return `${firstChar}${value.substr(1, value.length)}`\n    }\n    return value;\n  }\n\n  /**\n   * Load JSON.\n   *\n   * @param { String } path json path.\n   * @returns { Promise<any> } Promise of JSON object.\n   */\n  static LoadJSON(path) {\n    return new Promise((resolve) => {\n      const request = new XMLHttpRequest();\n      request.overrideMimeType('application/json');\n      request.open('GET', path, true);\n      request.onreadystatechange = () => {\n        console.log('request args', request.readyState, request.status)\n        if (request.readyState === 4 && request.status === 200) {\n          resolve(JSON.parse(request.response))\n        }\n      };\n      request.send(null);\n    });\n  }\n\n  /**\n   * After a change is needed, re-use the box display function to re-set inner html.\n   *\n   * @param {*} box \n   */\n  static DisplayBox(box) {\n    if (box && typeof box.display === 'function') {\n      // Allows change detection to happen bottom up if a prent was set.\n      if (box._parentBox) {\n        box._parentBox.detectBoxChanges();\n      }\n      BoxUtils.LoadDOMAttributes(box);\n      const newMarkup = box.display(box);\n      box.innerHTML = newMarkup;\n      if (box._init && typeof box.boxOnRedisplayed === 'function') {\n        box.boxOnRedisplayed()\n      }\n    }\n  }\n\n  /**\n   * Build box interfaces (setters and getters) if _BoxInterface present.\n   *\n   * @param { any } box box. \n   */\n  static BuildBoxInterfaces(box) {\n    if (box) {\n      const boxInterface = box.constructor._BoxInterface;\n      if (boxInterface) {\n        BoxUtils.BuildBoxInputs(box, boxInterface.Inputs || {});\n        if (boxInterface.Outputs) {\n          BoxUtils.BuildBoxOutputs(box, boxInterface.Outputs);\n        }\n      }\n    }\n  }\n\n  /**\n   * Build box inputs for a box.\n   *\n   * @param { any } inputsObject inputs object from _BoxInterface\n   */\n  static BuildBoxInputs(box, inputsObject) {\n    const inputsWithStockProperties = {\n      _parentBoxId: null,\n      ...inputsObject,\n    }\n    Object.keys(inputsWithStockProperties).forEach(interfaceProp => {\n      const setterName = BoxUtils.BuildSetterName(interfaceProp);\n      const getterName = BoxUtils.BuildGetterName(interfaceProp);\n      box[setterName] = (value) => {\n        box[interfaceProp] = value;\n        box.detectBoxChanges();\n      }\n      console.log('aa made setter', setterName)\n      box[getterName] = () => {\n        return box[interfaceProp];\n      }\n      if (\n        inputsWithStockProperties[interfaceProp] !== null && \n        typeof inputsWithStockProperties[interfaceProp] !== 'undefined'\n      ) {\n        // If there is a value, set it (apply defaults...)\n        box[interfaceProp] = inputsWithStockProperties[interfaceProp];\n      }\n    });\n    console.log('aa setup box inputs', box)\n  }\n\n  /**\n   * Build output events for a box.\n   *\n   * @param { any } inputsObject \n   */\n  static BuildBoxOutputs(box, outputsObject) {\n    Object.keys(outputsObject).forEach(interfaceProp => {\n      const newBoxOutputEvent = new CustomEvent(`(${interfaceProp})`, { detail: box });\n      const eventBoxName = `_event_${interfaceProp}`;\n      box[eventBoxName] = newBoxOutputEvent;\n      // Add the dispatch function.\n      box[BoxUtils.BuildPrefixedFunctionName('dispatch', interfaceProp)] = (...args) => {\n        box.dispatchEvent(box[eventBoxName])\n      }\n      // Add the listen function.\n      box[BoxUtils.BuildPrefixedFunctionName('add', `${interfaceProp}Listener`)] = (callback) => {\n        box.addEventListener(`(${interfaceProp})`, callback, false);\n      }\n      // Add the remove listener function.\n      box[BoxUtils.BuildPrefixedFunctionName('remove', `${interfaceProp}Listener`)] = () => {\n        box.removeEventListener(`(${interfaceProp})`, callback);\n      }\n    });\n  }\n\n  /**\n   * Build the standard variables that go on boxes.\n   *\n   * @param { any } box box. \n   */\n  static BuildBoxStandardVariables(box) {\n    const contextPath = `SharedBoxCore.loadedBoxes.get('${box._name}').get('${box._boxId}')`\n    box._context = contextPath;\n  }\n\n  /**\n   * Load attributes from the DOM if they have been specified in the _BoxInterface!\n   * \n   * @param { any } box box.\n   */\n  static LoadDOMAttributes(box) {\n    if (box.attributes) {\n      const boxInterface = box.constructor._BoxInterface;\n      if (boxInterface) {\n        for (let i = 0; i < box.attributes.length; i++) {\n          const boxAttribute = box.attributes.item(i);\n          const { name: attributeName, value: attributeValue } = boxAttribute;\n          const trimmedName = BoxUtils.TrimFirstAndLastChar(attributeName);\n          if (BoxUtils.IsVariableInputProperty(attributeName) && boxInterface.Inputs && boxInterface.Inputs[trimmedName]) {\n            console.log('aa name', trimmedName)\n            // NOTE: add extra logic here that somethow watches [] vars!\n            const setterName = BoxUtils.BuildSetterName(trimmedName);\n            if (typeof box[setterName] === 'function') {\n              box[trimmedName] = boxAttribute.value;\n            }\n          } else if (BoxUtils.IsOutputProperty(attributeName) && boxInterface.Outputs && boxInterface.Outputs[trimmedName]) {\n            // Add the listener.\n            const functionName = BoxUtils.GetFunctionNameFromFunctionCallString(attributeValue);\n            const parentBox = box.getParentBox();\n            box.addEventListener(attributeName, (ev) => parentBox[functionName](ev))\n          } else {\n            // Is normal stirng or number input property.\n            const setterName = BoxUtils.BuildSetterName(attributeName);\n            console.log('aa found setter!', box[setterName])\n            if (typeof box[setterName] === 'function') {\n              box[attributeName] = boxAttribute.value;\n              console.log('aa value set!', box[attributeName])\n            }\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * Check if a property name is an input.\n   *\n   * @param { String } propertyName property name.\n   */\n  static IsVariableInputProperty(propertyName) {\n    if (propertyName && propertyName.length) {\n      return (\n        propertyName.length > 2 &&\n        propertyName[0] === '[' &&\n        propertyName[propertyName.length - 1] === ']'\n      )\n    }\n  }\n\n  static GetFunctionNameFromFunctionCallString(functionCallString) {\n\n  }\n\n  /**\n   * Check if a property name is an output.\n   *\n   * @param { String } propertyName property name.\n   */\n  static IsOutputProperty(propertyName) {\n    if (propertyName && propertyName.length) {\n      return (\n        propertyName.length > 2 &&\n        propertyName[0] === '(' &&\n        propertyName[propertyName.length - 1] === ')'\n      )\n    }\n  }\n\n  /**\n   * Remove the first and last char of a string.\n   *\n   * @param { Stirng } propertyName property name.\n   */\n  static TrimFirstAndLastChar(propertyName) {\n    let returnString = propertyName;\n    if (propertyName && propertyName.length > 2) {\n      returnString = returnString.slice(1, (propertyName.length - 1))\n    }\n    return returnString;\n  }\n\n  /**\n   * Add box to the loaded boxes.\n   *\n   * @param { any } box box\n   */\n  static AddBoxToLoadedBoxes(box) {\n    const boxConfig = box.constructor._BoxConfig;\n    const boxStore = SharedBoxCore.loadedBoxes.get(boxConfig.name);\n    if (!boxStore) {\n      SharedBoxCore.loadedBoxes.set(\n        boxConfig.name, \n        new Map()\n      )\n    }\n    SharedBoxCore.loadedBoxes.get(boxConfig.name).set(box._boxId, box);\n  }\n}\n","const document = () => null;\nconst window = () => null;\n\nexport class BoxInnerCore {\n  static Document = (document || (() => null));\n\n  static Window = (window || (() => null));\n\n  static LoadDOM = (window, document) => {\n    BoxInnerCore.Window = window;\n    BoxInnerCore.Document = document;\n  }\n}\n","import { BoxUtils } from './box-utils';\nimport { BoxInnerCore } from './box-inner-core';\n\n/**\n * @author Alessandro Alberga\n * @description Describes the base structure of a box.\n */\nconst htmlElementClass = (BoxInnerCore.Window.HTMLElement || (() => null))\n\nexport class Box extends htmlElementClass {\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Initialise our special box!\n   */\n  connectedCallback() {\n    const boxConfig = this.constructor._BoxConfig;\n    this._boxId = SharedBoxCore.getNewBoxId(boxConfig);\n    this.id = this._boxId;\n    this._name = boxConfig.name\n    if (boxConfig.styleSheetPath) {\n      BoxLoader.LoadStylesheet(boxConfig.styleSheetPath);\n    }\n    BoxUtils.BuildBoxStandardVariables(this);\n    BoxUtils.BuildBoxInterfaces(this);\n    BoxUtils.DisplayBox(this)\n    this.detectBoxChanges = () => BoxUtils.DisplayBox(this)\n    if (typeof this.boxOnDisplayed === 'function') this.boxOnDisplayed();\n    BoxUtils.AddBoxToLoadedBoxes(this);\n    this._init = true;\n  }\n\n  /**\n   * Get the parent box from the parentBoxId set.\n   */\n  getParentBox() {\n    return BoxInnerCore.Document.getElementById(this._parentBoxId);\n  }\n\n  /**\n   * Allows any box to terminate itself.\n   */\n  terminateSelf() {\n    this._container.remove();\n    if (typeof this.boxOnDestroyed === 'function') this.boxOnDestroyed();\n  }\n\n  /**\n   * Get box element by id.\n   *\n   * @param { Number } id box id. \n   */\n  getBoxElementById(id) {\n    const element = BoxInnerCore.Document.getElementById(`${this._boxId}-${id}`)\n    return element;\n  }\n\n  /**\n   * Box disconnected callback.\n   */\n  disconnectedCallback() {\n    if (typeof this.boxOnDestroyed === 'function') this.boxOnDestroyed();\n  }\n}\n","import { BoxInnerCore } from './box-inner-core';\n\n/**\n * @author Alessandro Alberga\n * @description Box CORE.\n */\nexport class BoxCore {\n\n  static LoadedBoxes = new Map();\n\n  static BoxRegistry = new Map();\n\n  /**\n   * Set the box registry. Must be called before init.\n   *\n   * @param { Map } registry registry map.\n   */\n  static SetBoxRegistry(registry) {\n    if (registry) {\n      this.BoxRegistry = registry;\n    } else {\n      throw new Error('BoxJs: Fatal, no box registry specified.');\n    }\n  }\n\n  /**\n   * Kick off the boxes...\n   */\n  static Init = () => {\n    // Build the elements registry.\n    this.BuildBoxesCustomElementRegistry()\n    // Add the root box.\n    BoxInnerCore.Document.getElementById('root').innerHTML = '<box-main></box-main>'\n  }\n\n  /**\n   * Crawl the box registry and builds all of the custom elements.\n   */\n  static BuildBoxesCustomElementRegistry() {\n    this.BoxRegistry.forEach(boxClass => {\n      if (boxClass._BoxConfig) {\n        const { _BoxConfig: boxConfig } = boxClass;\n        if (boxConfig) {\n          BoxInnerCore.Window.customElements.define(boxConfig.name, boxClass)\n          console.log(`BoxJS: Defined: \"${boxConfig.name}\"`)\n        } \n      } else {\n        throw new Error(`BoxJS: _BoxConfig not present on: \"${boxClass}\"`)\n      }\n    })\n  }\n  \n  /**\n   * Creates our boxes.\n   *\n   * @param { any } boxName name of box.\n   */\n  BoxInstanceFactory = (boxClassName) => {\n    const boxCapitalisedName = BoxUtils.CapitalizeFirstLetter(boxClassName);\n    const instance = new (this.BoxRegistry.get(boxCapitalisedName))()\n    return instance;\n  }\n  \n  /**\n   * Create the box container element.\n   *\n   * @param { any } box box.\n   */\n  CreateBoxContainer = (box) => {\n    const boxConfig = box.constructor._BoxConfig;\n    const boxContainer = BoxInnerCore.Document.createElement('div');\n    boxContainer.setAttribute('id', box._boxId);\n    boxContainer.setAttribute('class', boxConfig.name);\n    return boxContainer;\n  }\n\n  /**\n   * Take box config and return the new box id.\n   *\n   * @param { any } boxConfig box config.\n   */\n  static GetNewBoxId(boxConfig) {\n    let boxCount = 0;\n    if (BoxCore.loadedBoxes.get(boxConfig.name)) {\n      boxCount = BoxCore.loadedBoxes.get(boxConfig.name).size;\n    }\n    const boxId = `${boxConfig.name}-${boxCount}`;\n    return boxId;\n  }\n\n  /**\n   * Add a box to the DOM.\n   *\n   * @param { any } box the box to add to the DOM.\n   * @param { String } parentBoxId parents box id.\n   */\n  static AddBoxToDOM = (box, parentBoxId) => {\n    const boxParent = BoxInnerCore.Document.getElementById(parentBoxId);\n    const boxConfig = box.constructor._BoxConfig;\n    const newBoxId = this.GetNewBoxId(boxConfig);\n    box._boxId = newBoxId;\n    box._name = boxConfig.name;\n    // Add box to loaded boxes.\n    BoxUtils.AddBoxToLoadedBoxes(box);\n    BoxUtils.BuildBoxInterfaces(box);\n    BoxUtils.BuildBoxStandardVariables(box);\n    // Setup styles.\n    if (boxConfig.styleSheetPath) {\n      BoxLoader.LoadStylesheet(boxConfig.styleSheetPath);\n    }\n    // Setup the box container.\n    const boxContainer = this.CreateBoxContainer(box)\n    // Set retaining values.\n    box._container = boxContainer;\n    // Setup the initial markup and add box to parent!\n    BoxUtils.DisplayBox(box);\n    if (parentBoxId) {\n      // Only add to DOM if a parentBoxId provided...\n      if (boxParent) {\n        boxParent.appendChild(boxContainer);\n      } else {\n        throw new Error(`BoxJS: Cannot add box to null parent. \"${parentBoxId}\"`);\n      }\n    }\n    // Allow the box to detect for changes.\n    box.detectBoxChanges = () => BoxUtils.DisplayBox(box)\n    // Run the displayed hook if present.\n    if (typeof box.boxOnDisplayed === 'function') {\n      box.boxOnDisplayed();\n    }\n    box._init = true;\n    return box;\n  }\n  \n  /**\n   * Add a box.\n   *\n   * @param {*} name \n   * @param {*} parentBoxId \n   */\n  static MakeBox = (className, parentBoxId) => {\n    const box = this.BoxInstanceFactory(className);\n    box._className = className;\n    box._parentBoxId = parentBoxId;\n    return this.AddBoxToDOM(box, parentBoxId);  \n  }\n}\n\n// const SharedBoxCore = new BoxCore();\n// console.log('BoxJs: Setup SharedBoxCore')\n// const SharedBoxCoreAPI = new BoxCoreAPI();\n// console.log('BoxJs: Setup SharedBoxCoreAPI')\n// SharedBoxCore.setBoxRegistry(new Map([\n//   ['MainBox', MainBox],\n//   ['DialogBox', DialogBox],\n//   ['AnimationBox', AnimationBox],\n//   ['NavigatorBox', NavigatorBox],\n//   ['DummyDialogBox', DummyDialogBox],\n//   ['DataFetcherBox', DataFetcherBox]\n// ]));\n// SharedBoxCore.init();\n","const express = require('express');\nconst favicon = require('express-favicon');\nconst path = require('path');\nconst port = process.env.PORT || 2021;\n\nexport default (dir) => {\n  const app = express();\n  const pubDir = dir + '/public'\n  const distDir = dir + '/dist'\n  console.log(`HyperBox: starting up application...`)\n  app.use(favicon(pubDir + '/favicon.ico'));\n  app.use(express.static(distDir));// send the user to index html page inspite of the url\n  app.get('*', (req, res) => {\n    res.sendFile(path.resolve(distDir, 'index.html'));\n  });\n  app.listen(port, () => {\n    console.log(`HyperBox: application running on port ${port} 🚀`)\n  });\n}\n","import {Box} from './box';\nimport {BoxCore} from './box-core';\nimport startBoxServer from './start-box-server';\n\nexport default {\n  Box,\n  BoxCore,\n  startBoxServer\n};\n"],"sourceRoot":""}